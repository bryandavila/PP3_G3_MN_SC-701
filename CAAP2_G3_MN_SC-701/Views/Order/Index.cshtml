@model IEnumerable<CAAP2.Models.Order>

@{
    ViewData["Title"] = "Lista de Órdenes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="my-3">Lista de Órdenes</h2>

<div class="mb-3 d-flex gap-2">
    @if (User.IsInRole("Admin") || User.IsInRole("User"))
    {
        <a href="/Order/Create" class="btn btn-success">Crear Nueva Orden</a>
    }
    @if (User.IsInRole("Admin"))
    {
        <a href="/Order/ProcessOrders" class="btn btn-primary">Procesar Órdenes</a>
    }
</div>

@if (TempData["ProcessResult"] != null)
{
    <div class="alert alert-info">@TempData["ProcessResult"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
@if (ViewBag.ExchangeRate != null)
{
    <div class="alert alert-success">
        <strong>Tipo de cambio (@ViewBag.ExchangeRate.Fecha):</strong>
        @if (ViewBag.ExchangeRate.Compra != null)
        {
            <span>Compra: ₡@(((decimal)ViewBag.ExchangeRate.Compra).ToString("N2"))</span>
        }
        else
        {
            <span class="text-warning">Compra no disponible</span>
        }

        |
        <span>Venta: ₡@(((decimal)ViewBag.ExchangeRate.Venta).ToString("N2"))</span>
    </div>
}
else
{
    <div class="alert alert-warning">No se pudo obtener el tipo de cambio actual. Intente más tarde.</div>
}



@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<div class="row">
    <div class="col-md-8">
        <table class="table table-striped table-bordered align-middle">
            <thead class="table-dark text-center">
                <tr>
                    <th>ID</th>
                    <th>Usuario</th>
                    <th>Detalle</th>
                    <th>Prioridad</th>
                    <th>Monto</th>
                    <th>Estado</th>
                    <th>Tipo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model)
                {
                    <tr id="row-@order.OrderID">
                        <td>@order.OrderID</td>
                        <td>@order.User?.FullName</td>
                        <td>@order.OrderDetail</td>
                        <td>@order.Priority</td>
                        <td>@order.TotalAmount.ToString("C")</td>
                        <td id="status-@order.OrderID">@order.Status</td>
                        <td>@order.OrderType?.Name</td>
                        <td class="text-nowrap">
                            <a href="#" class="btn btn-info btn-sm me-1" onclick="loadDetails(@order.OrderID)">Ver</a>
                            @if (User.IsInRole("Admin"))
                            {
                                <a href="/Order/Edit/@order.OrderID" class="btn btn-warning btn-sm me-1">Editar</a>
                            }
                            @if (order.Status == "Pending")
                            {
                                @if (User.IsInRole("Admin"))
                                {
                                    <button class="btn btn-danger btn-sm me-1 cancelar-btn" data-id="@order.OrderID" id="cancel-@order.OrderID">Cancelar</button>
                                }
                                <button class="btn btn-sm btn-outline-success ejecutar-btn" data-id="@order.OrderID" id="btn-@order.OrderID">Ejecutar</button>
                            }
                            else
                            {
                                <span class="badge bg-success">Procesada</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="col-md-4">
        <h4>Detalle de Orden</h4>
        <div id="orderDetailsContainer" class="border p-3 bg-light rounded">
            <p class="text-muted">Seleccione una orden para ver su detalle.</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function loadDetails(orderId) {
            fetch(`/Order/DetailsPartial/${orderId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Error cargando detalles.");
                    return response.text();
                })
                .then(html => {
                    document.getElementById("orderDetailsContainer").innerHTML = html;
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("Ocurrió un error al cargar los detalles de la orden.");
                });
        }

        document.querySelectorAll(".ejecutar-btn").forEach(btn => {
            btn.addEventListener("click", async () => {
                const id = btn.dataset.id;
                const statusCell = document.getElementById("status-" + id);
                const button = document.getElementById("btn-" + id);
                const cancelBtn = document.getElementById("cancel-" + id);

                button.disabled = true;
                button.textContent = "Procesando...";
                if (cancelBtn) cancelBtn.remove();

                const response = await fetch("/Order/ExecuteOrder", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ id: parseInt(id) })
                });

                const result = await response.json();
                if (result.success) {
                    statusCell.textContent = "Processed";
                    button.remove();
                    const badge = document.createElement("span");
                    badge.classList.add("badge", "bg-success");
                    badge.textContent = "Procesada";
                    button.parentNode.appendChild(badge);
                } else {
                    alert(result.message || "Error al ejecutar la orden");
                    button.disabled = false;
                    button.textContent = "Ejecutar";
                }
            });
        });

        document.querySelectorAll(".cancelar-btn").forEach(btn => {
            btn.addEventListener("click", async () => {
                const id = btn.dataset.id;
                if (!confirm("¿Seguro que deseas cancelar esta orden?")) return;
                window.location.href = `/Order/Delete/${id}`;
            });
        });
    </script>
}
